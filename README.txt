# 개인 스케줄러 관리 시스템

## 시스템 개요
본 프로젝트는 클라이언트-서버 기반의 개인 스케줄러 관리 시스템입니다.
사용자 계정 관리(회원가입, 로그인, 탈퇴)와 개인 메모 관리(추가, 조회, 수정, 삭제, 검색) 기능을 제공하며, 작성한 메모를 다양한 형식(txt, md, json, xml)으로 내보내는(export) 기능을 지원합니다.

## 시스템 실행 방법
1.  먼저 서버를 실행합니다: `bin/ps_server.exe`
    -   서버는 백그라운드에서 실행되며 클라이언트의 연결을 대기합니다.
    -   서버 시작 시 `data` 및 `data/memo` 디렉터리가 없는 경우 자동으로 생성합니다.
2.  클라이언트를 실행합니다: `bin/ps_client.exe`
3.  클라이언트에서 로그인 또는 회원가입 후 스케줄러 기능을 이용합니다.

## 주요 기능
-   **사용자 관리**: 회원가입, 로그인, 계정 삭제 기능을 제공하여 사용자별로 데이터를 관리합니다.
-   **메모 관리**: 메모 추가, 전체/개별 조회, 수정, 삭제 및 내용 기반 검색 기능을 지원합니다.
-   **페이지네이션**: 많은 수의 메모를 페이지 단위로 나누어 보여줍니다.
-   **데이터 내보내기**: 특정 메모 또는 전체 메모를 `txt`, `md`, `json`, `xml` 형식의 파일로 다운로드할 수 있습니다.
-   **클라이언트-서버 구조**: 소켓 통신을 기반으로 클라이언트와 서버가 분리되어 동작합니다.
-   **안정적인 한글 입력**: 입력 처리 로직 개선으로 백스페이스 등 편집 과정에서 한글 깨짐 현상 없이 안정적인 입력을 지원합니다.

## 파일 구조

### 메인 및 메뉴 모듈
-   **ps_client.c**:
    -   클라이언트 프로그램의 메인 진입점입니다.
    -   서버에 연결하고, 연결 성공 시 메인 메뉴(`display_main_menu`)를 호출합니다.

-   **ps_server.c**:
    -   서버 프로그램의 메인 진입점입니다.
    -   소켓을 설정하고 클라이언트의 연결을 수락합니다.
    -   클라이언트로부터 받은 명령어를 분석하여 `user_command.c` 또는 `memo_command.c`의 해당 함수로 처리를 위임합니다.
    -   서버 시작 시 데이터 디렉터리를 확인하고 생성하는 역할을 담당합니다.

-   **main_menu.h / main_menu.c**:
    -   로그인 성공 후 표시되는 메인 메뉴 UI를 구현합니다.
    -   '메모 관리', '전체 메모 다운로드', '회원 탈퇴', '로그아웃' 등의 기능을 제공합니다.

-   **user_menu.h / user_menu.c**:
    -   초기 화면의 사용자 관련 메뉴(로그인, 회원가입) UI를 구현합니다.

-   **memo_menu.h / memo_menu.c**:
    -   메모 관리와 관련된 모든 사용자 인터페이스를 처리합니다.
    -   기능: 메모 목록 표시(페이지네이션 포함), 메모 추가, 상세 보기, 수정, 삭제, 검색.
    -   메모 상세 보기 화면에서 개별 메모를 다운로드하는 기능을 포함합니다.

### 데이터 관리 모듈
-   **user.h / user.c**:
    -   `USER` 구조체를 정의하고 사용자 데이터 관리의 핵심 로직을 구현합니다.
    -   `data/users.txt` 파일에서 사용자 정보를 로드하고, 변경 사항을 저장합니다.
    -   사용자 인증(로그인), 신규 사용자 추가(회원가입), 사용자 삭제 등의 함수를 제공합니다.

-   **memo.h / memo.c**:
    -   `MEMO` 구조체를 정의하고 메모 데이터 관리의 핵심 로직을 구현합니다.
    -   `data/memo/` 디렉터리 아래에 있는 각 사용자별 메모 파일들을 로드하고, 변경 사항을 저장/삭제/수정합니다.
    -   메모 데이터의 동적 할당 및 해제, 검색, 정렬 등의 기능을 포함합니다.

### 명령어 처리 모듈
-   **user_command.h / user_command.c**:
    -   서버에서 사용자 관련 명령어(`LOGIN`, `REGISTER`, `DELETE_USER`)를 처리합니다.
    -   `user.c`의 함수를 호출하여 실제 작업을 수행하고, 처리 결과를 클라이언트에게 보낼 응답 문자열로 포맷팅합니다.

-   **memo_command.h / memo_command.c**:
    -   서버에서 메모 관련 명령어(`GET_MEMOS`, `ADD_MEMO`, `UPDATE_MEMO`, `DELETE_MEMO`, `DOWNLOAD_ALL`, `DOWNLOAD_SINGLE` 등)를 처리합니다.
    -   `memo.c` 및 `export_util.c`의 함수들을 호출하여 작업을 수행하고, 결과를 클라이언트에 전송할 형태로 가공합니다.

### 공통 및 유틸리티 모듈
-   **common_input.h / common_input.c**:
    -   여러 메뉴에서 공통으로 사용되는 입력 처리 함수를 제공합니다.
    -   특히 `get_utf8_input` 함수는 한글과 같은 UTF-8 멀티바이트 문자를 글자 단위로 올바르게 처리하여, 백스페이스 입력 시 글자가 깨지지 않도록 합니다.
    -   화면 클리어, 비밀번호 마스킹 입력 등의 유틸리티 함수도 포함합니다.

-   **export_util.h / export_util.c**:
    -   메모 데이터를 다양한 파일 형식으로 변환하는 로직을 담당합니다.
    -   `to_txt`, `to_markdown`, `to_json`, `to_xml` 함수를 통해 메모 내용을 지정된 포맷의 문자열로 변환하는 역할을 수행합니다.

## 데이터 파일
-   **data/users.txt**:
    -   사용자 정보를 저장하는 파일입니다. (형식: `아이디:비밀번호`)
    -   서버 시작 시 메모리로 로드되며, 사용자 정보 변경 시 파일에 즉시 반영됩니다.

-   **data/memo/{username}_{memo_id}.txt**:
    -   개별 메모 데이터를 저장하는 파일입니다.
    -   파일 내용은 메모의 생성 날짜, 수정 날짜, 그리고 메모 본문으로 구성됩니다.
    -   메모가 생성, 수정, 삭제될 때마다 해당 파일이 생성되거나 내용이 변경/삭제됩니다.
